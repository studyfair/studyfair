version: "3.8"

x-frontier-ror: &frontier-ror
  build: frontier
  env_file: .env

services:
  nginx:
    image: nginx:1.24.0
    ports:
      - "80:80"
      - "443:443"
    container_name: nginx
    environment:
      NGINX_CONF: |
        upstream frontier {
          server frontier:3000;
        }

        upstream storage {
          server s3:9000;
        }

        server {
          listen 80;

          server_name _;

          return 301 https://$$host$$request_uri;
        }

        server {
          listen 443 ssl default_server;
          listen [::]:443 ssl default_server;

          ssl_certificate               /etc/ssl/certs/ca.crt;
          ssl_certificate_key           /etc/ssl/certs/ca.key;
          ssl_protocols                 TLSv1 TLSv1.1 TLSv1.2;
          ssl_prefer_server_ciphers     on;
          ssl_ciphers                   "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
          ssl_ecdh_curve                secp384r1;
          ssl_session_cache             shared:SSL:10m;
          ssl_session_tickets           off;
          ssl_stapling                  on;
          ssl_stapling_verify           on;
          resolver                      8.8.8.8 8.8.4.4 valid=300s;
          resolver_timeout              5s;

          add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
          add_header X-Frame-Options DENY;
          add_header X-Content-Type-Options nosniff;

          location /storage {
            rewrite /storage/(.*) /$$1 break;

            proxy_redirect     off;
            proxy_set_header   Host $$host;

            proxy_pass         http://storage;
          }

          location / {
            proxy_redirect     off;
            proxy_set_header   Host $$host;
            proxy_set_header   X-Real-IP $$remote_addr;
            proxy_set_header   X-Forwarded-For $$proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $$server_name;
            proxy_set_header   X-Forwarded-Proto https;
            proxy_set_header   X-Forwarded-Server $$host;

            proxy_pass         http://frontier;
          }
        }
    depends_on:
      - frontier-web
    command:
      - /bin/bash
      - -c
      - |
        set -e;
        cat > /etc/nginx/conf.d/default.conf <<<$$NGINX_CONF;
        nginx -g "daemon off;";
    networks:
      - backend
    volumes:
      - ./nginx/ssl/ca.crt:/etc/ssl/certs/ca.crt:ro
      - ./nginx/ssl/ca.key:/etc/ssl/certs/ca.key:ro
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  frontier-web:
    <<: *frontier-ror
    container_name: frontier-web
    depends_on:
      - redis
      - frontier-worker
      - postgresql
    networks:
      backend:
        aliases:
          - "frontier"
    command: ["bundle exec rake db:create db:migrate && rails server -b 0.0.0.0"]
    healthcheck:
      test: ["CMD", "curl", "localhost:3000/api/status"]
      interval: 10m
      timeout: 5s
      retries: 5
      start_period: 20s

  frontier-worker:
    <<: *frontier-ror
    container_name: frontier-worker
    # command: ["bundle exec sidekiq --environment production"]
    command: ["bundle exec sidekiq"]
    volumes:
      - ./.volumes/git-repositories:/app/git-repositories
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - redis
      - detector
    networks:
      - backend
    healthcheck:
      test: ["CMD", "bash", "/app/bin/utils/sidekiq-liveness-probe"]
      interval: 30s
      timeout: 5s
      retries: 20
      start_period: 20s

  redis:
    image: redis:6.2-alpine
    container_name: frontier-redis
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - ./.volumes/redis:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  detector:
    build: detector
    container_name: clone-detector
    networks:
      - backend

  s3:
    image: minio/minio:RELEASE.2023-05-04T21-44-30Z
    container_name: s3
    ports:
      - "9001:9001"
    volumes:
      - ./.volumes/s3:/data
    environment:
      MINIO_ROOT_USER: username
      MINIO_ROOT_PASSWORD: password
    networks:
      - backend
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD-SHELL", "curl -f -I http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  postgresql:
    image: postgres:15.2-alpine3.17
    container_name: frontier-postgresql
    volumes:
      - ./.volumes/postgresql:/var/lib/postgresql/data
    networks:
      - backend
    env_file: .postgresql.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U frontier -d frontier_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

networks:
  backend:
